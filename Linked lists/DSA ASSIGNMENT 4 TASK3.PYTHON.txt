class Node:
    def __init__(self, data):
        self.data = data
        self.prev = None
        self.next = None

class DoublyLinkedList:
    def __init__(self):
        self.head = None

    def insert_at_end(self, data):
        new_node = Node(data)
        if self.head is None:
            self.head = new_node
        else:
            temp = self.head
            while temp.next:
                temp = temp.next
            temp.next = new_node
            new_node.prev = temp

    def insert_before(self, next_node, new_data):
        if next_node is None:
            print("The given next node cannot be None.")
            return
        new_node = Node(new_data)
        new_node.next = next_node
        new_node.prev = next_node.prev

        if next_node.prev:
            next_node.prev.next = new_node
        else:
            self.head = new_node

        next_node.prev = new_node

    def display(self):
        current = self.head
        while current:
            print(current.data, end=" ")
            current = current.next
        print()

if __name__ == "__main__":
    dll = DoublyLinkedList()
    dll.insert_at_end(10)
    dll.insert_at_end(20)
    dll.insert_at_end(30)
    dll.insert_at_end(40)

    print("Original List:")
    dll.display()

    node_to_insert_before = dll.head.next.next 
    dll.insert_before(node_to_insert_before, 25)

    print("List after inserting 25 before 30:")
    dll.display()
